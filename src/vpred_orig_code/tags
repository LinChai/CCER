!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Node	VPred.h	/^struct Node {$/;"	s
Node	VPred.h	/^typedef struct Node Node;$/;"	t	typeref:struct:Node
Object	Object.h	/^Object::Object(unsigned long id, int fid, float threshold) {$/;"	f	class:Object
Object	Object.h	/^class Object {$/;"	c
Object_H_GUARD	Object.h	2;"	d
PARSE_COMMAND_LINE_H_GUARD	ParseCommandLine.h	2;"	d
STRUCT_H_GUARD	Struct.h	2;"	d
STRUCT_PLUS_H_GUARD	StructPlus.h	2;"	d
Struct	Struct.h	/^struct Struct {$/;"	s
Struct	Struct.h	/^typedef struct Struct Struct;$/;"	t	typeref:struct:Struct
StructPlus	StructPlus.h	/^struct StructPlus {$/;"	s
StructPlus	StructPlus.h	/^typedef struct StructPlus StructPlus;$/;"	t	typeref:struct:StructPlus
V	VPred.h	1;"	d
addNode	Object.h	/^Object* Object::addNode(unsigned long id, bool left, int featureId, float threshold) {$/;"	f	class:Object
addNode	Struct.h	/^Struct* addNode(Struct* node, unsigned long id, int leftChild, int featureId, float threshold) {$/;"	f
addNode	StructPlus.h	/^void addNode(StructPlus* tree, unsigned long pindex,$/;"	f
children	VPred.h	/^  int children[2];$/;"	m	struct:Node
compress	StructPlus.h	/^StructPlus* compress(StructPlus* root) {$/;"	f
compressNodes	StructPlus.h	/^long compressNodes(StructPlus* array, StructPlus* old, long index) {$/;"	f
countNodes	StructPlus.h	/^long countNodes(StructPlus* root) {$/;"	f
createNode	Struct.h	/^Struct* createNode(unsigned long id, int fid, float threshold) {$/;"	f
createNodes	StructPlus.h	/^StructPlus* createNodes(long size) {$/;"	f
createNodes	VPred.c	/^int createNodes(Struct* root, long i, Node* nodes) {$/;"	f
destroyTree	Struct.h	/^void destroyTree(Struct* node) {$/;"	f
destroyTree	StructPlus.h	/^void destroyTree(StructPlus* tree) {$/;"	f
fid	Object.h	/^  int fid;$/;"	m	class:Object
fid	Struct.h	/^  int fid; \/\/ Feature id$/;"	m	struct:Struct
fid	StructPlus.h	/^  int fid;$/;"	m	struct:StructPlus
fid	VPred.h	/^  int fid;$/;"	m	struct:Node
findLeaf	VPred.c	/^void (*findLeaf[151])(int* leaves, float* features,$/;"	v
findLeafDepth1	VPred.h	/^void findLeafDepth1(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth10	VPred.h	/^void findLeafDepth10(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth100	VPred.h	/^void findLeafDepth100(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth101	VPred.h	/^void findLeafDepth101(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth102	VPred.h	/^void findLeafDepth102(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth103	VPred.h	/^void findLeafDepth103(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth104	VPred.h	/^void findLeafDepth104(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth105	VPred.h	/^void findLeafDepth105(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth106	VPred.h	/^void findLeafDepth106(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth107	VPred.h	/^void findLeafDepth107(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth108	VPred.h	/^void findLeafDepth108(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth109	VPred.h	/^void findLeafDepth109(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth11	VPred.h	/^void findLeafDepth11(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth110	VPred.h	/^void findLeafDepth110(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth111	VPred.h	/^void findLeafDepth111(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth112	VPred.h	/^void findLeafDepth112(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth113	VPred.h	/^void findLeafDepth113(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth114	VPred.h	/^void findLeafDepth114(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth115	VPred.h	/^void findLeafDepth115(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth116	VPred.h	/^void findLeafDepth116(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth117	VPred.h	/^void findLeafDepth117(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth118	VPred.h	/^void findLeafDepth118(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth119	VPred.h	/^void findLeafDepth119(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth12	VPred.h	/^void findLeafDepth12(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth120	VPred.h	/^void findLeafDepth120(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth121	VPred.h	/^void findLeafDepth121(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth122	VPred.h	/^void findLeafDepth122(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth123	VPred.h	/^void findLeafDepth123(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth124	VPred.h	/^void findLeafDepth124(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth125	VPred.h	/^void findLeafDepth125(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth126	VPred.h	/^void findLeafDepth126(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth127	VPred.h	/^void findLeafDepth127(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth128	VPred.h	/^void findLeafDepth128(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth129	VPred.h	/^void findLeafDepth129(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth13	VPred.h	/^void findLeafDepth13(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth130	VPred.h	/^void findLeafDepth130(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth131	VPred.h	/^void findLeafDepth131(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth132	VPred.h	/^void findLeafDepth132(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth133	VPred.h	/^void findLeafDepth133(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth134	VPred.h	/^void findLeafDepth134(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth135	VPred.h	/^void findLeafDepth135(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth136	VPred.h	/^void findLeafDepth136(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth137	VPred.h	/^void findLeafDepth137(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth138	VPred.h	/^void findLeafDepth138(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth139	VPred.h	/^void findLeafDepth139(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth14	VPred.h	/^void findLeafDepth14(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth140	VPred.h	/^void findLeafDepth140(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth141	VPred.h	/^void findLeafDepth141(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth142	VPred.h	/^void findLeafDepth142(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth143	VPred.h	/^void findLeafDepth143(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth144	VPred.h	/^void findLeafDepth144(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth145	VPred.h	/^void findLeafDepth145(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth146	VPred.h	/^void findLeafDepth146(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth147	VPred.h	/^void findLeafDepth147(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth148	VPred.h	/^void findLeafDepth148(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth149	VPred.h	/^void findLeafDepth149(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth15	VPred.h	/^void findLeafDepth15(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth150	VPred.h	/^void findLeafDepth150(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth16	VPred.h	/^void findLeafDepth16(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth17	VPred.h	/^void findLeafDepth17(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth18	VPred.h	/^void findLeafDepth18(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth19	VPred.h	/^void findLeafDepth19(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth2	VPred.h	/^void findLeafDepth2(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth20	VPred.h	/^void findLeafDepth20(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth21	VPred.h	/^void findLeafDepth21(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth22	VPred.h	/^void findLeafDepth22(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth23	VPred.h	/^void findLeafDepth23(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth24	VPred.h	/^void findLeafDepth24(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth25	VPred.h	/^void findLeafDepth25(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth26	VPred.h	/^void findLeafDepth26(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth27	VPred.h	/^void findLeafDepth27(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth28	VPred.h	/^void findLeafDepth28(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth29	VPred.h	/^void findLeafDepth29(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth3	VPred.h	/^void findLeafDepth3(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth30	VPred.h	/^void findLeafDepth30(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth31	VPred.h	/^void findLeafDepth31(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth32	VPred.h	/^void findLeafDepth32(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth33	VPred.h	/^void findLeafDepth33(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth34	VPred.h	/^void findLeafDepth34(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth35	VPred.h	/^void findLeafDepth35(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth36	VPred.h	/^void findLeafDepth36(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth37	VPred.h	/^void findLeafDepth37(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth38	VPred.h	/^void findLeafDepth38(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth39	VPred.h	/^void findLeafDepth39(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth4	VPred.h	/^void findLeafDepth4(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth40	VPred.h	/^void findLeafDepth40(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth41	VPred.h	/^void findLeafDepth41(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth42	VPred.h	/^void findLeafDepth42(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth43	VPred.h	/^void findLeafDepth43(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth44	VPred.h	/^void findLeafDepth44(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth45	VPred.h	/^void findLeafDepth45(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth46	VPred.h	/^void findLeafDepth46(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth47	VPred.h	/^void findLeafDepth47(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth48	VPred.h	/^void findLeafDepth48(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth49	VPred.h	/^void findLeafDepth49(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth5	VPred.h	/^void findLeafDepth5(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth50	VPred.h	/^void findLeafDepth50(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth51	VPred.h	/^void findLeafDepth51(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth52	VPred.h	/^void findLeafDepth52(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth53	VPred.h	/^void findLeafDepth53(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth54	VPred.h	/^void findLeafDepth54(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth55	VPred.h	/^void findLeafDepth55(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth56	VPred.h	/^void findLeafDepth56(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth57	VPred.h	/^void findLeafDepth57(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth58	VPred.h	/^void findLeafDepth58(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth59	VPred.h	/^void findLeafDepth59(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth6	VPred.h	/^void findLeafDepth6(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth60	VPred.h	/^void findLeafDepth60(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth61	VPred.h	/^void findLeafDepth61(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth62	VPred.h	/^void findLeafDepth62(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth63	VPred.h	/^void findLeafDepth63(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth64	VPred.h	/^void findLeafDepth64(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth65	VPred.h	/^void findLeafDepth65(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth66	VPred.h	/^void findLeafDepth66(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth67	VPred.h	/^void findLeafDepth67(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth68	VPred.h	/^void findLeafDepth68(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth69	VPred.h	/^void findLeafDepth69(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth7	VPred.h	/^void findLeafDepth7(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth70	VPred.h	/^void findLeafDepth70(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth71	VPred.h	/^void findLeafDepth71(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth72	VPred.h	/^void findLeafDepth72(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth73	VPred.h	/^void findLeafDepth73(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth74	VPred.h	/^void findLeafDepth74(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth75	VPred.h	/^void findLeafDepth75(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth76	VPred.h	/^void findLeafDepth76(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth77	VPred.h	/^void findLeafDepth77(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth78	VPred.h	/^void findLeafDepth78(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth79	VPred.h	/^void findLeafDepth79(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth8	VPred.h	/^void findLeafDepth8(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth80	VPred.h	/^void findLeafDepth80(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth81	VPred.h	/^void findLeafDepth81(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth82	VPred.h	/^void findLeafDepth82(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth83	VPred.h	/^void findLeafDepth83(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth84	VPred.h	/^void findLeafDepth84(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth85	VPred.h	/^void findLeafDepth85(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth86	VPred.h	/^void findLeafDepth86(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth87	VPred.h	/^void findLeafDepth87(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth88	VPred.h	/^void findLeafDepth88(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth89	VPred.h	/^void findLeafDepth89(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth9	VPred.h	/^void findLeafDepth9(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth90	VPred.h	/^void findLeafDepth90(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth91	VPred.h	/^void findLeafDepth91(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth92	VPred.h	/^void findLeafDepth92(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth93	VPred.h	/^void findLeafDepth93(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth94	VPred.h	/^void findLeafDepth94(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth95	VPred.h	/^void findLeafDepth95(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth96	VPred.h	/^void findLeafDepth96(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth97	VPred.h	/^void findLeafDepth97(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth98	VPred.h	/^void findLeafDepth98(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
findLeafDepth99	VPred.h	/^void findLeafDepth99(int* leaves, float* featureVector, int numberOfFeatures, Node* nodes) {$/;"	f
getLeaf	Object.h	/^float Object::getLeaf(float* featureVector, int featureVectorSize) {$/;"	f	class:Object
getLeaf	Struct.h	/^Struct* getLeaf(Struct* pThis, float* featureVector) {$/;"	f
getLeaf	StructPlus.h	/^StructPlus* getLeaf(StructPlus* pThis, float* featureVector) {$/;"	f
getValueCL	ParseCommandLine.h	/^char* getValueCL(int argc, char** argv, char* flag) {$/;"	f
id	Object.h	/^  unsigned long id; \/\/ Node id$/;"	m	class:Object
id	Struct.h	/^  unsigned long id; \/\/ Node id$/;"	m	struct:Struct
id	StructPlus.h	/^  unsigned long id;$/;"	m	struct:StructPlus
isPresentCL	ParseCommandLine.h	/^int isPresentCL(int argc, char** argv, char* flag) {$/;"	f
left	Object.h	/^  Object* left;$/;"	m	class:Object
left	Struct.h	/^  Struct* left; \/\/ Left node$/;"	m	struct:Struct
left	StructPlus.h	/^  StructPlus* left;$/;"	m	struct:StructPlus
main	Object.cpp	/^int main(int argc, char** args) {$/;"	f
main	Struct.c	/^int main(int argc, char** args) {$/;"	f
main	StructPlus.c	/^int main(int argc, char** args) {$/;"	f
main	VPred.c	/^int main(int argc, char** args) {$/;"	f
right	Object.h	/^  Object* right;$/;"	m	class:Object
right	Struct.h	/^  Struct* right; \/\/ Right node$/;"	m	struct:Struct
right	StructPlus.h	/^  StructPlus* right;$/;"	m	struct:StructPlus
setRoot	StructPlus.h	/^void setRoot(StructPlus* tree, unsigned long id, int featureId, float threshold) {$/;"	f
theta	VPred.h	/^  float theta;$/;"	m	struct:Node
threshold	Object.h	/^  float threshold;$/;"	m	class:Object
threshold	Struct.h	/^  float threshold; \/\/ Threshold\/Regression value$/;"	m	struct:Struct
threshold	StructPlus.h	/^  float threshold;$/;"	m	struct:StructPlus
~Object	Object.h	/^Object::~Object() {$/;"	f	class:Object
